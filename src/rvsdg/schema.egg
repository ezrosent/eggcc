(datatype Type)
(datatype Literal)
(datatype Expr)
(datatype Operand)
(datatype Body)

;; Type
(function TNum () Type)
(function TFloat () Type)
(function TChar () Type)
(function TPtr (Type) Type)

;; Literal
(function Num (i64) Literal)
(function Float (f64) Literal)
(function Char (String) Literal)
(function Ptr (Type i64) Literal)

;; Expr
(function Add (Operand Operand) Expr)
(function Sub (Operand Operand) Expr)
(function Mul (Operand Operand) Expr)
(function Div (Operand Operand) Expr)
(function Eq (Operand Operand) Expr)
(function Lt (Operand Operand) Expr)
(function Gt (Operand Operand) Expr)
(function Le (Operand Operand) Expr)
(function Ge (Operand Operand) Expr)
(function Not (Operand Operand) Expr)
(function And (Operand Operand) Expr)
(function Or (Operand Operand) Expr)

;; Operand
(function Arg (i64) Operand)
(function Node (Body) Operand)
(function Project (i64 Body) Operand)

(sort VecOperand (Vec Operand))
(datatype VecOperandWrapper
  (VO VecOperand))
(sort VecVecOperand (Vec VecOperandWrapper))

;; Body
(function PureOp (Expr) Body)
(function Gamma (Operand VecOperand VecVecOperand) Body) ;; branching
(function Theta (Operand VecOperand VecOperand) Body) ;; loop


;; procedure f(n):
;;   i = 0
;;   while i < n
;;     ans += i * 5
;;     i += 1
;;   return ans

;; ;; inputs: [n]
;; (Project 1
;;     (Theta 
;;         (Lt (Arg 1) (Arg 2)) ;; pred
;;         (vec-of ;; inputs
;;             (Node (PureOp (Const 0))) ;; accumulator
;;             (Node (PureOp (Const 0))) ;; loop var
;;             (Arg 0) ;; n
;;             )
;;         (vec-of ;; outputs
;;             (Node (PureOp (Add (Arg 0) 
;;                 (Node (PureOp (Mul 
;;                     (Arg 1)
;;                     (Node (PureOp (Const 5)))))))))
;;             (Node (PureOp (Add (Arg 1) (Node (PureOp (Const 1))))))
;;             (Arg 2)
;;         ))
;; )